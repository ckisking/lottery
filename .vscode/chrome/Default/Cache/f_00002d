require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"Game":[function(require,module,exports){
"use strict";
cc._RFpush(module, '99a21/QP1lPe7/XszA26w5W', 'Game');
// Game.js

var NumberManager = require('NumberManager');
var State = cc.Enum({
    Setup: -1,
    ReadyToRoll: -1,
    Rolling: -1
});

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}

cc.Class({
    'extends': cc.Component,

    properties: {
        numberMng: NumberManager,
        btnStart: cc.Button,
        sizeInput: cc.EditBox,
        startInput: cc.EditBox,
        winnerLayout: cc.Layout,
        winnerPrefab: cc.Prefab,
        instruction: cc.RichText,
        state: {
            get: function get() {
                return this._state;
            },
            set: function set(val) {
                if (this._state !== val) {
                    this._state = val;
                    this.updateState(val);
                }
            },
            visible: false
        }
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.size = null; // the size of the candidate pool
        this.startIdx = null;
        this.pool = []; // candidate pool
        this.winner = -1;
        this.state = State.Setup;
        this.numberMng.init(this);
    },

    btnStartClick: function btnStartClick() {
        if (this.state === State.ReadyToRoll) {
            this.state = State.Rolling;
            this.numberMng.startRolling();
            this.scheduleOnce(this.showResult, this.numberMng.digits * this.numberMng.delayPerDigits + 2, this);
        }
    },

    showResult: function showResult() {
        var winnerIdx = getRandomInt(0, this.pool.length);
        this.winner = this.pool[winnerIdx];
        this.numberMng.showResult(this.winner);
        this.pool.splice(winnerIdx, 1);
    },

    finishResult: function finishResult() {
        var winner = cc.instantiate(this.winnerPrefab);
        winner.getComponent('WinnerLabel').init(this.winner);
        this.winnerLayout.node.addChild(winner);
        this.state = State.ReadyToRoll;
    },

    updateSize: function updateSize(editBox) {
        var input = 0;
        try {
            input = parseInt(editBox.string);
        } catch (e) {
            editBox.string = 'invalid';
            return;
        }
        this.size = input;
        if (typeof this.startIdx === "number" && !Number.isNaN(this.startIdx)) {
            this.state = State.ReadyToRoll;
        }
    },

    generatePool: function generatePool() {
        this.pool = [];
        for (var i = 0; i < this.size; ++i) {
            this.pool.push(this.startIdx + i);
        }
    },

    updateStartIdx: function updateStartIdx(editBox) {
        var input = 0;
        try {
            input = parseInt(editBox.string);
        } catch (e) {
            editBox.string = 'invalid';
            return;
        }
        this.startIdx = input;
        if (typeof this.size === "number" && !Number.isNaN(this.size)) {
            this.state = State.ReadyToRoll;
        }
    },

    updateState: function updateState(state) {
        switch (state) {
            case State.Setup:
                this.sizeInput.maxLength = 8;
                this.sizeInput.string = '';
                this.btnStart.interactable = false;
                this.instruction.string = '请输入参与抽奖人数和开始序号，如需重新输入请按复位按钮';
                break;
            case State.ReadyToRoll:
                this.sizeInput.maxLength = 0;
                this.btnStart.interactable = true;
                this.instruction.string = '本次抽奖参与者共 <color=green>' + this.size + '</color> 人，开始序号为<color=blue> ' + this.startIdx + ' </color>';
                this.generatePool();
                break;
            case State.Rolling:
                this.sizeInput.maxLength = 0;
                this.btnStart.interactable = false;
                break;
        }
    },

    reset: function reset() {
        this.state = State.Setup;
        this.size = null;
        this.startIdx = null;
        this.winner = -1;
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RFpop();
},{"NumberManager":"NumberManager"}],"NumberDisplay":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0a686UOefBFtaPfbgH4a+6d', 'NumberDisplay');
// NumberDisplay.js

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}

cc.Class({
    'extends': cc.Component,

    properties: {
        label: cc.Label,
        interval: 0
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.label.string = '0';
    },

    startRolling: function startRolling() {
        this.schedule(this.updateDisplay, this.interval, this);
    },

    updateDisplay: function updateDisplay() {
        var randomNum = getRandomInt(0, 10);
        if (randomNum === this.lastNum) {
            randomNum += 1;
            if (randomNum >= 10) {
                randomNum = 0;
            }
        }
        this.label.string = randomNum.toString();
        this.lastNum = randomNum;
    },

    stopRolling: function stopRolling() {
        this.unschedule(this.updateDisplay, this);
    },

    showNumber: function showNumber(num) {
        this.stopRolling();
        if (num >= 10) {
            cc.log('invalid result!');
            return;
        }
        this.label.string = Math.floor(num).toString();
    }
});

cc._RFpop();
},{}],"NumberManager":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f157dcnP69HcIcCwcaMJA4Q', 'NumberManager');
// NumberManager.js

cc.Class({
    'extends': cc.Component,

    properties: {
        numberPrefab: cc.Prefab,
        digits: 0,
        delayPerDigits: 0,
        layout: cc.Layout // should be right to left horizontal
    },

    // use this for initialization
    init: function init(game) {
        this.numbers = []; // [NumberDisplay]
        this.game = game;
        for (var i = 0; i < this.digits; ++i) {
            var number = cc.instantiate(this.numberPrefab);
            this.numbers.push(number.getComponent('NumberDisplay'));
            this.layout.node.addChild(number);
            number.setPositionY = 0;
        }
    },

    startRolling: function startRolling() {
        for (var i = 0; i < this.digits; ++i) {
            this.startRollSingleDigit(i);
        }
    },

    startRollSingleDigit: function startRollSingleDigit(idx) {
        var _this = this;

        this.scheduleOnce(function () {
            _this.numbers[idx].startRolling();
        }, this.delayPerDigits * (idx + 1));
    },

    showResult: function showResult(result) {
        var _this2 = this;

        var resultArr = result.toString();

        var _loop = function (i) {
            var curNum = '';
            if (i < resultArr.length) {
                curNum = resultArr[_this2.digits - i - 1];
            } else {
                curNum = '0';
            }
            _this2.scheduleOnce(function () {
                _this2.numbers[i].showNumber(curNum);
                if (i === 0) {
                    _this2.game.finishResult();
                }
            }, _this2.delayPerDigits * (_this2.digits - i));
        };

        for (var i = this.digits - 1; i >= 0; --i) {
            _loop(i);
        }
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RFpop();
},{}],"WinnerLabel":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e398fCiPK9Fd4uCVUUMc0eE', 'WinnerLabel');
// WinnerLabel.js

cc.Class({
    'extends': cc.Component,

    properties: {
        anim: cc.Animation,
        label: cc.Label
    },

    // use this for initialization
    init: function init(num) {
        this.label.string = num.toString();
        this.anim.play('appear');
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}]},{},["NumberDisplay","Game","WinnerLabel","NumberManager"])

//# sourceMappingURL=data:application/json;base64,